version: "3"
services:

  frontend:
    container_name: "frontend"
    build: ./frontend
    ports:
      - "3000:3000"
    #environment:
    #  - REACT_APP_API_URL=http://localhost:4566
    volumes:
      - "./frontend/public:/app/public"
      - "./frontend/src:/app/src"

  localstack:
    container_name: "localstack"
    image: localstack/localstack:latest
    ports:
      - "4566:4566" # localstack gateway
      - "4510-4559:4510-4559" # external services port range
    environment:
      - SERVICES=lambda,s3,dynamodb,apigateway
      - DEBUG=0
      - LAMBDA_EXECUTOR=${LAMBDA_EXECUTOR-}
      - DOCKER_HOST=unix:///var/run/docker.sock
      - SKIP_SSL_CERT_DOWNLOAD=1
      - SKIP_INFRA_DOWNLOADS=1
      - DISABLE_EVENTS=1
      - AWS-REGION=us-east-1
      - AWS_ACCESS_KEY_ID=localstack
      - AWS_SECRET_ACCESS_KEY=localstack
    volumes:
      - ".volume:/var/lib/localstack"
      - "/var/run/docker.sock:/var/run/docker.sock"
    networks:
      - backend
  
  template-microservice:
    container_name: "template-microservice"
    build:
      context: ./template-microservice
      dockerfile: dockerfile
      no_cache: true
    environment:
      - AWS_DEFAULT_REGION=us-east-1
      - AWS_ENDPOINT_URL=http://localstack:4566 # host localstack must match the name of the service which runs localstack
      - AWS_ACCESS_KEY_ID=fakecred # Sometimes boto3 needs credentials
      - AWS_SECRET_ACCESS_KEY=fakecred # Sometimes boto3 needs credentials
      - APIG_TAG_ID=API_TAG_ID
      - APIG_TAG=apig_template
      - APIG_STAGE=PROD
      - AM_I_IN_A_DOCKER_CONTAINER=True
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock"
    depends_on:
      - localstack
    networks:
      - backend
  
  template-microservice-debugger:
    container_name: "template-microservice-debugger"
    build:
      context: ./template-microservice
      dockerfile: dockerfile_debugger
      no_cache: true
    environment:
      - AWS_DEFAULT_REGION=us-east-1
      - AWS_ENDPOINT_URL=http://localstack:4566 # host localstack must match the name of the service which runs localstack
      - AWS_ACCESS_KEY_ID=fakecred # Sometimes boto3 needs credentials 
      - AWS_SECRET_ACCESS_KEY=fakecred
      - AM_I_IN_A_DOCKER_CONTAINER=True
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock"
    depends_on:
      - localstack
    networks:
      - backend

<<<<<<< HEAD
  # django:
  #   container_name: "djangoproject"
  #   build: ./python/djangoproject
  #   ports:
  #     - "8000:8000"
  #   depends_on:
  #     - postgresdb_service
  #   command: >
  #     bash -c "python manage.py wait_for_db &&
  #     python manage.py makemigrations  --noinput &&
  #     python manage.py migrate --noinput &&
  #     python manage.py initadmin &&
  #     python manage.py runserver 0.0.0.0:8000"
  #   environment:
  #     POSTGRES_USER: "admin"
  #     POSTGRES_PASSWORD: "admin"
  #   volumes:
  #     - ./python/djangoproject:/app
  #   networks:
  #     - backend

  # postgresdb_service:
  #   image: postgres:latest
  #   container_name: "postgresdb_container"
  #   ports:
  #     - "5400:5432"
  #   environment:
  #     POSTGRES_DB: "postgresdb"
  #     POSTGRES_USER: "admin"
  #     POSTGRES_PASSWORD: "admin"
  #   networks:
  #     - backend
  #   #volumes:
  #   #  - dbvolume:/var/lib/postgresql/data
=======
  product:
    container_name: "product"
    build:
      context: ./product-service
      dockerfile: dockerfile
      no_cache: true
    environment:
      - AWS_DEFAULT_REGION=us-east-1
      - AWS_ENDPOINT_URL=http://localstack:4566 # host localstack must match the name of the service which runs localstack
      - AWS_ACCESS_KEY_ID=fakecred # Sometimes boto3 needs credentials
      - AWS_SECRET_ACCESS_KEY=fakecred # Sometimes boto3 needs credentials
      - APIG_TAG_ID=API_TAG_ID
      - APIG_TAG=apig_shopprofiles
      - APIG_STAGE=PROD
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock"
    depends_on:
      - localstack
      - shopprofile
    networks:
      - backend
  
  product-debugger:
    container_name: "product-debugger"
    build:
      context: ./product-service
      dockerfile: dockerfile_debugger
      no_cache: true
    environment:
      - AWS_DEFAULT_REGION=us-east-1
      - AWS_ENDPOINT_URL=http://localstack:4566 # host localstack must match the name of the service which runs localstack
      - AWS_ACCESS_KEY_ID=fakecred # Sometimes boto3 needs credentials 
      - AWS_SECRET_ACCESS_KEY=fakecred
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock"
    depends_on:
      - localstack
    networks:
      - backend

#  django:
#    container_name: "djangoproject"
#    build: ./python/djangoproject
#    ports:
#      - "8000:8000"
#    depends_on:
#      - postgresdb_service
#    command: >
#      bash -c "python manage.py wait_for_db &&
#      python manage.py makemigrations  --noinput &&
#      python manage.py migrate --noinput &&
#      python manage.py initadmin &&
#      python manage.py runserver 0.0.0.0:8000"
#    environment:
#      POSTGRES_USER: "admin"
#      POSTGRES_PASSWORD: "admin"
#    volumes:
#      - ./python/djangoproject:/app
#    networks:
#      - backend

#  postgresdb_service:
#    image: postgres:latest
#    container_name: "postgresdb_container"
#    ports:
#      - "5400:5432"
#    environment:
#      POSTGRES_DB: "postgresdb"
#      POSTGRES_USER: "admin"
#      POSTGRES_PASSWORD: "admin"
#    networks:
#      - backend
#    volumes:
#      - dbvolume:/var/lib/postgresql/data
>>>>>>> 65531e18f8b072b44751be15a86db093eca76544

#volumes:
#  dbvolume:

networks:
  backend:
    external: false
